#lang racket

(define (cont-frac n d k)
    (define (calcu N D FRAC)
        (/ N (+ D FRAC)))
    (cond   ((= k 1)    (calcu (n k) (d k) (d k)))
            (else       (calcu (n k) (d k) (cont-frac n d (- k 1))))
    )
)

(define (test-cont-frac)
    (define flag false)
    (define (good-enough? x target)
        (define tolerance 0.0001)
        (< (abs (- x target)) tolerance)
    )
    (define (test-cont-frac-iter iter-num)
        (let    (
                    (target (/ (- (sqrt 5) 1) 2))
                    (cnt 1)
                )
            (if (good-enough?   (cont-frac  (lambda (i) 1.0)
                                            (lambda (i) 1.0)
                                            (+ iter-num 1))
                                target)
                (print iter-num)
                (test-cont-frac-iter (+ iter-num 1))
            )
        )
    )
    (test-cont-frac-iter 1)
)

(test-cont-frac)